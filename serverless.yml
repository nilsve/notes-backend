# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
service: aws-rust # NOTE: update this with your service name
provider:
  region: eu-west-1
  name: aws
  runtime: rust

  environment:
    CUSTOMER_DATA_TABLE_NAME: ${self:custom.customerDataTable}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*
        - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table

custom:
  rust:
    dockerless: true
#    dockerTag: 'latest'
#    dockerImage: 'rustserverless/lambda-rust'

  customerDataTable: ${self:service}-${opt:stage, self:provider.stage}-customer-data

package:
  individually: true

plugins:
  - serverless-rust

functions:
  graphql:
    memorySize: 128
    handler: graphql
    events:
      - httpApi:
          path: '/graphql'
          method: GET
      - httpApi:
          path: '/graphql'
          method: POST
      - httpApi:
          path: '/graphql'
          method: PUT
      - httpApi:
          path: '/graphql'
          method: DELETE
resources:
  Resources:
    customerData:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.customerDataTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: customer_id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: customer_id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
#        GlobalSecondaryIndexes:
#          - IndexName: GSI_INVERSE
#            KeySchema:
#              - AttributeName: sk
#                KeyType: HASH
#              - AttributeName: pk
#                KeyType: RANGE
#            Projection:
#              ProjectionType: ALL
#          - IndexName: GSI_1
#            KeySchema:
#              - AttributeName: gsi1_pk
#                KeyType: HASH
#              - AttributeName: gsi1_sk
#                KeyType: RANGE
#            Projection:
#              ProjectionType: ALL

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

